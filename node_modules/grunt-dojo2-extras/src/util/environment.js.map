{"version":3,"file":"environment.js","sourceRoot":"","sources":["../../../src/util/environment.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,yBAAgC;IAOnB,QAAA,cAAc,GAAG,aAAa,CAAC;IAK/B,QAAA,aAAa,GAAG,mBAAmB,CAAC;IAKpC,QAAA,cAAc,GAAG,oBAAoB,CAAC;IAKtC,QAAA,cAAc,GAAG,aAAa,CAAC;IAE5C;QACC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC;IAC1C,CAAC;IAFD,sCAEC;IAID;QACC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC;IAClC,CAAC;IAFD,sCAEC;IAKD,0BAAiC,IAAgB;QAAhB,qBAAA,EAAA,OAAO,OAAO,EAAE;QAChD,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAQ,IAAI,SAAO,CAAC;IAC1D,CAAC;IAFD,4CAEC;IAKD;QACC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC;IAClC,CAAC;IAFD,8BAEC;IAKD,oBAA2B,OAA6C;QAA7C,wBAAA,EAAA,UAAkB,OAAO,CAAC,GAAG,CAAC,sBAAc,CAAC;QACvE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC7C,CAAC;IAFD,gCAEC;IAMD,2BAAkC,OAAgB;QACjD,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAGvD,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,KAAK,MAAM,CAAC;QACnD,CAAC;QACD,EAAE,CAAC,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;YAEzB,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC5B,CAAC;QAGD,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAbD,8CAaC;IAED;QACC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;IAC9B,CAAC;IAFD,4CAEC;IAMD,oBAA2B,IAAwB;QAAxB,qBAAA,EAAA,OAAe,OAAO,EAAE;QAClD,MAAM,CAAC,eAAU,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAFD,gCAEC;IAKD;QACC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,KAAK,MAAM,CAAC;IACjD,CAAC;IAFD,8BAEC;IAKD;QACC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC;IACpC,CAAC;IAFD,8CAEC;IAKD;QACC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,YAAY,CAAC;IAC7C,CAAC;IAFD,0BAEC;IAKD,qBAA4B,YAAmE;QAAnE,6BAAA,EAAA,eAA4B,iBAAiB,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ;QAC9F,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,YAAY,CAAC;IAChD,CAAC;IAFD,kCAEC;IAKD;QACC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,IAAI,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,EAAE,CAAC;IAC9E,CAAC;IAFD,4CAEC","sourcesContent":["import { existsSync } from 'fs';\nimport { PublishMode } from '../commands/publish';\nimport { Auth } from 'github';\n\n/**\n * the name of the environment variable holding the github authentication for API calls\n */\nexport const githubAuthName = 'GITHUB_AUTH';\n\n/**\n * the name of the environment variable holding the decryption iv value\n */\nexport const decryptIvName = 'publish_deploy_iv';\n\n/**\n * the name of the environment variable holding the decryption key value\n */\nexport const decryptKeyName = 'publish_deploy_key';\n\n/**\n * the name of the environment variable holding the private key to publish to GitHub\n */\nexport const privateKeyName = 'PRIVATE_KEY';\n\nexport function commitMessage(): string {\n\treturn process.env.TRAVIS_COMMIT_MESSAGE;\n}\n/**\n * @return the current branch as defined by the environment\n */\nexport function currentBranch(): string {\n\treturn process.env.TRAVIS_BRANCH;\n}\n\n/**\n * @return the name of the encrypted keyFile\n */\nexport function encryptedKeyFile(file = keyFile()) {\n\treturn process.env.ENCRYPTED_KEY_FILE || `${ file }.enc`;\n}\n\n/**\n * @return the hash of the commit that triggered this build\n */\nexport function gitCommit(): string {\n\treturn process.env.TRAVIS_COMMIT;\n}\n\n/**\n * @return OAuth credentials to be used in GitHub queries\n */\nexport function githubAuth(authStr: string = process.env[githubAuthName]): Auth {\n\treturn authStr ? JSON.parse(authStr) : null;\n}\n\n/**\n * @param keyFile the filename of the key file to use for git credentials\n * @return {boolean} if the current environment will be able to run git commands requiring credentials\n */\nexport function hasGitCredentials(keyFile?: string): boolean {\n\tif (process.env.hasOwnProperty('HAS_GIT_CREDENTIALS')) {\n\t\t// allow for this check to be overridden in case credentials are provided to the environment in another way\n\t\t// e.g. registering a deploy key or GitHub oauth ID with Travis\n\t\treturn process.env.HAS_GIT_CREDENTIALS === 'true';\n\t}\n\tif (isRunningOnTravis()) {\n\t\t// If we are running on Travis then assume we need they key file\n\t\treturn hasKeyFile(keyFile);\n\t}\n\n\t// If we are not running on Travis then assume that we are running locally and have git credentials\n\treturn true;\n}\n\nexport function hexoRootOverride() {\n\treturn process.env.HEXO_ROOT;\n}\n\n/**\n * @param file the filename of the key file used ssh+git permissions\n * @return {boolean} if the defined key file exists\n */\nexport function hasKeyFile(file: string = keyFile()): boolean {\n\treturn existsSync(file);\n}\n\n/**\n * @return if the build was triggered by a cron job\n */\nexport function isCronJob(): boolean {\n\treturn process.env.TRAVIS_EVENT_TYPE === 'cron';\n}\n\n/**\n * @return {boolean} if we are currently running on Travis\n */\nexport function isRunningOnTravis(): boolean {\n\treturn !!process.env.TRAVIS_BRANCH;\n}\n\n/**\n * @return the name of the key file used for deploys as defined by the environment\n */\nexport function keyFile(): string {\n\treturn process.env.KEY_FILE || 'deploy_key';\n}\n\n/**\n * @return The current publish mode defined by the environment\n */\nexport function publishMode(defaultValue: PublishMode = isRunningOnTravis() ? 'skip' : 'commit'): PublishMode {\n\treturn process.env.DEPLOY_DOCS || defaultValue;\n}\n\n/**\n * @return the current Github repository as defined by the environment (e.g. dojo/core)\n */\nexport function repositorySource(): string {\n\treturn process.env.PUBLISH_TARGET_REPO || process.env.TRAVIS_REPO_SLUG || '';\n}\n"]}