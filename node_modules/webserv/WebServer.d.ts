/// <reference types="node" />
import { Handler } from './handlers/Handler';
import { Server as HttpServer } from 'http';
import { Server as HttpsServer, ServerOptions as HttpsOptions } from 'https';
import WebApplication from './WebApplication';
export interface Config {
    type?: 'http' | 'https';
    port?: string;
    httpsOptions?: HttpsOptions;
}
export declare type ServerType = HttpServer | HttpsServer;
export interface ServerState {
    started: Server<any>['_started'];
    listening: Server<any>['_listening'];
    closed: Server<any>['_closed'];
}
export declare class Server<T extends Handler> {
    readonly app: T;
    readonly config: Config;
    private _server;
    private _started;
    private _listening;
    private _closed;
    constructor(handler: T, config?: Config);
    readonly port: string;
    readonly type: "http" | "https";
    readonly state: ServerState;
    isRunning(): boolean;
    start(): Promise<ServerState>;
    stop(): void;
    private createServer();
}
export default class WebServer extends Server<WebApplication> {
    constructor(config?: Config);
}
