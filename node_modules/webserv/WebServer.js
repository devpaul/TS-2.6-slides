"use strict";
const http_1 = require("http");
const https_1 = require("https");
const WebApplication_1 = require("./WebApplication");
const DEFAULT_CONFIG = Object.freeze({
    type: 'http',
    port: '8888'
});
class Server {
    constructor(handler, config = Object.assign({}, DEFAULT_CONFIG)) {
        this.app = handler;
        this.config = config;
    }
    get port() {
        return this.config.port || DEFAULT_CONFIG.port;
    }
    get type() {
        return this.config.type || DEFAULT_CONFIG.type;
    }
    get state() {
        if (this.isRunning()) {
            return {
                started: this._started,
                listening: this._listening,
                closed: this._closed
            };
        }
        return null;
    }
    isRunning() {
        return !!this._server;
    }
    start() {
        if (this.isRunning()) {
            return Promise.resolve(this.state);
        }
        const server = this._started = this.createServer();
        return server
            .then((server) => {
            this._server = server;
            this._closed = new Promise((resolve) => {
                server.on('close', () => {
                    this._server = null;
                    resolve();
                });
            });
            this._listening = new Promise((resolve) => {
                server.listen(this.port, () => {
                    resolve(server);
                });
            });
            return this.state;
        });
    }
    stop() {
        if (this._server) {
            this._server.close();
        }
        this._server = null;
    }
    createServer() {
        return new Promise((resolve, reject) => {
            if (this.type === 'http') {
                const server = http_1.createServer((request, response) => {
                    return this.app.handle(request, response);
                });
                resolve(server);
            }
            else if (this.type === 'https') {
                const options = this.config.httpsOptions || {};
                const server = https_1.createServer(options, () => {
                    resolve(server);
                });
            }
            else {
                reject(new Error(`Unknown server type "${this.config.type}"`));
            }
        });
    }
}
exports.Server = Server;
class WebServer extends Server {
    constructor(config = Object.assign({}, DEFAULT_CONFIG)) {
        super(new WebApplication_1.default(), config);
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = WebServer;
//# sourceMappingURL=WebServer.js.map