/// <reference types="node" />
import { Handler, Response, HandlerFunction } from './Handler';
import { ServerResponse, IncomingMessage } from 'http';
/**
 * Directives are used for processing the middleware stack. Their behavior is as follows:
 *
 * void: continue processing the next element as normal
 * skip: skip the remaining middleware in the current group
 * immediate: immediately return the response and skip the rest of the middleware
 */
export declare type Directive = Response | 'skip' | 'immediate';
export declare type HandlerDefinition = Handler | HandlerFunction | Array<Handler | HandlerFunction>;
export default class Group implements Handler {
    readonly handlers: Handler[];
    constructor(handlers?: HandlerDefinition);
    add(handler: HandlerDefinition): this;
    handle(request: IncomingMessage, response: ServerResponse): Promise<Directive>;
    private processHandlers(request, response);
}
