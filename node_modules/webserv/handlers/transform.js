"use strict";
const url_1 = require("url");
const proxies_1 = require("../util/proxies");
/**
 * Transform the incoming request to include additional
 *
 * @param handler the handler to receive transformed data
 * @param transform the transform to apply to the request
 * @return {(request:IncomingMessage, response:ServerResponse)=>Promise<Response>} a transform function
 */
function transform(handler, transform) {
    return function (request, response) {
        request = transform(request);
        return handler(request, response);
    };
}
exports.transform = transform;
/**
 * Wrap a proxy around a handler that transforms data to the handler
 *
 * @param handler the Handler to be proxied
 * @param transformFunc the transform method that transforms the request
 * @return {Handler} a proxied version of the Handler
 */
function proxy(handler, transformFunc) {
    return proxies_1.overrideWrapper(handler, {
        handle: transform(handler.handle.bind(handler), transformFunc)
    });
}
exports.proxy = proxy;
function relativeUrl(match, replace = '') {
    return function (request) {
        return proxies_1.descriptorWrapper(request, {
            originalUrl: {
                get() {
                    return request.url;
                }
            },
            url: {
                get() {
                    const requestUrl = url_1.parse(request.url);
                    if (requestUrl.path.indexOf(match) === 0) {
                        requestUrl.path = requestUrl.pathname = replace + requestUrl.path.substring(match.length) || '/';
                    }
                    return url_1.format(requestUrl);
                }
            }
        });
    };
}
exports.relativeUrl = relativeUrl;
//# sourceMappingURL=transform.js.map