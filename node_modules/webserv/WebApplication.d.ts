/// <reference types="node" />
import { Handler, Response } from './handlers/Handler';
import { ServerResponse, IncomingMessage } from 'http';
import Group from './handlers/Group';
export interface Options {
    timeout?: WebApplication["timeout"];
    errorHandler?: WebApplication["errorHandler"];
}
/**
 * A WebApplication is typically the root handler for the server. It manages the middleware.
 */
export declare class Application<T extends Handler> implements Handler {
    middleware: T;
    timeout: number;
    constructor(middleware: T, options?: Options);
    handle(request: IncomingMessage, response: ServerResponse): Promise<Response>;
    protected postProcessing(_request: IncomingMessage, response: ServerResponse): void;
    protected errorHandler(_request: IncomingMessage, response: ServerResponse, error: Error): Promise<string>;
    protected statusResponse(_code: number, error: Error): string;
    protected promiseTimeout(timeout?: number): Promise<void>;
}
export default class WebApplication extends Application<Group> {
    constructor(options?: Options);
}
