"use strict";
const Group_1 = require("./handlers/Group");
const MiddlewareError_1 = require("./MiddlewareError");
const DEFAULT_TIMEOUT = 5000;
/**
 * A WebApplication is typically the root handler for the server. It manages the middleware.
 */
class Application {
    constructor(middleware, options = {}) {
        this.middleware = middleware;
        this.timeout = options.timeout || DEFAULT_TIMEOUT;
        if (options.errorHandler) {
            this.errorHandler = options.errorHandler;
        }
    }
    handle(request, response) {
        return Promise.race([
            this.promiseTimeout(),
            this.middleware.handle(request, response)
        ]).then(() => {
            return this.postProcessing(request, response);
        }).catch((error) => {
            // Send our errors to the error handler
            return this.errorHandler(request, response, error);
        });
    }
    postProcessing(_request, response) {
        if (!response.finished) {
            throw new MiddlewareError_1.default('Not Found', 404);
        }
    }
    errorHandler(_request, response, error) {
        return new Promise((resolve) => {
            const message = this.statusResponse(response.statusCode, error);
            response.statusCode = error.statusCode || 500;
            response.end(message, resolve);
        });
    }
    statusResponse(_code, error) {
        // override to provide custom error messages
        return error.message;
    }
    promiseTimeout(timeout = this.timeout) {
        return new Promise(function (_resolve, reject) {
            setTimeout(function () {
                reject(new MiddlewareError_1.default(`Response timeout of ${timeout} reached.`));
            }, timeout);
        });
    }
}
exports.Application = Application;
class WebApplication extends Application {
    constructor(options = {}) {
        super(new Group_1.default(), options);
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = WebApplication;
//# sourceMappingURL=WebApplication.js.map